# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI/main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import os
ringtail_gui_path = os.path.realpath(os.path.dirname(__file__))
sys.path.append(ringtail_gui_path)

from PyQt5 import QtCore, QtGui, QtWidgets
from utils import show_message, browse_directory, browse_file, save_file, get_energy_max_min, get_ligands_efficiency_max_min, Interaction, LigandFilter
from range_slider import RangeSlider
import multiprocessing
import qrc_resources
from interaction_widget import Interaction_Dialog
from ligand_widget import Ligand_Dialog
from list_example import list_example

class Ui_MainWindow(object):
    def __init__(self):        
        self.window = None
        
        self.db = None
        self.engine_types = ["AutoDockGPU", "Vina"]
        self.selected_engine = None
        self.processors_number = None        
        self.verbose = False
        self.debug = False
        
        # WRITE
        # Interactions
        self.add_interactions = False
        self.h_cutoff_distance = None
        self.vdw_cutoff_distance = None        
        self.tolerance = None
        self.max_poses = None
        self.store_all_poses = False
        
        # Ligands
        self.recursive = False
        self.ligands_directory = None
        self.ligands_file = None
        self.ligands_directory_pattern = None
        
        # Receptor
        self.receptor_file = None
        
        # READ
        # Properties
        self.absolute = False
        self.percentile = False
        self.ligands_efficiency_range = (None, None)
        self.energy_range = (None, None)
        self.ligands_efficiency_percentile = None
        self.energy_percentile = None
        
        # LIGAND
        self.selected_ligand_name_from_list = None
        self.ligands = list()
        
        # INTERACTIONS
        self.selected_interaction_from_list = None
        self.interactions = list()
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(944, 821)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.generalPropertiesBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.generalPropertiesBox.sizePolicy().hasHeightForWidth())
        self.generalPropertiesBox.setSizePolicy(sizePolicy)
        self.generalPropertiesBox.setObjectName("generalPropertiesBox")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.generalPropertiesBox)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.numberOfProcessorsLabel = QtWidgets.QLabel(self.generalPropertiesBox)
        self.numberOfProcessorsLabel.setObjectName("numberOfProcessorsLabel")
        self.gridLayout_4.addWidget(self.numberOfProcessorsLabel, 0, 0, 1, 1)
        self.numberOfProcessorsBox = QtWidgets.QSpinBox(self.generalPropertiesBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.numberOfProcessorsBox.sizePolicy().hasHeightForWidth())
        self.numberOfProcessorsBox.setSizePolicy(sizePolicy)
        self.numberOfProcessorsBox.setObjectName("numberOfProcessorsBox")
        self.numberOfProcessorsBox.setMaximum(multiprocessing.cpu_count())
        self.numberOfProcessorsBox.setMinimum(1)
        self.gridLayout_4.addWidget(self.numberOfProcessorsBox, 0, 1, 1, 1)
        self.verboseRadioButton = QtWidgets.QRadioButton(self.generalPropertiesBox)
        self.verboseRadioButton.setObjectName("verboseRadioButton")
        self.gridLayout_4.addWidget(self.verboseRadioButton, 0, 2, 1, 1)
        self.debugRadioButton = QtWidgets.QRadioButton(self.generalPropertiesBox)
        self.debugRadioButton.setObjectName("debugRadioButton")
        self.gridLayout_4.addWidget(self.debugRadioButton, 0, 3, 1, 1)
        self.gridLayout.addWidget(self.generalPropertiesBox, 2, 0, 1, 4)
        self.dbLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.dbLineEdit.setObjectName("dbLineEdit")
        self.gridLayout.addWidget(self.dbLineEdit, 0, 1, 1, 1)
        self.createDbButton = QtWidgets.QPushButton(self.centralwidget)
        self.createDbButton.setObjectName("createDbButton")
        self.gridLayout.addWidget(self.createDbButton, 0, 3, 1, 1)
        self.loadDbButton = QtWidgets.QPushButton(self.centralwidget)
        self.loadDbButton.setObjectName("loadDbButton")
        self.gridLayout.addWidget(self.loadDbButton, 0, 2, 1, 1)
        self.dbLabel = QtWidgets.QLabel(self.centralwidget)
        self.dbLabel.setObjectName("dbLabel")
        self.gridLayout.addWidget(self.dbLabel, 0, 0, 1, 1)
        # Logo
        self.logo_label = QtWidgets.QLabel(self.centralwidget)
        self.logo_label.setObjectName("logo_label")
        self.ringtailLogo = QtGui.QPixmap(":ringtail_logo.png")
        self.ringtail_logo_scaled = self.ringtailLogo.scaled(171, 60, QtCore.Qt.KeepAspectRatio)
        self.logo_label.setPixmap(self.ringtail_logo_scaled)
        self.logo_label.resize(self.ringtail_logo_scaled.width(), self.ringtail_logo_scaled.height())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.logo_label.sizePolicy().hasHeightForWidth())
        self.logo_label.setSizePolicy(sizePolicy)
        self.gridLayout.addWidget(self.logo_label, 0, 4, 1, 1)
        
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setObjectName("tabWidget")
        self.writeTab = QtWidgets.QWidget()
        self.writeTab.setObjectName("writeTab")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.writeTab)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.writeEngineGroupBox = QtWidgets.QGroupBox(self.writeTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.writeEngineGroupBox.sizePolicy().hasHeightForWidth())
        self.writeEngineGroupBox.setSizePolicy(sizePolicy)
        self.writeEngineGroupBox.setObjectName("writeEngineGroupBox")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.writeEngineGroupBox)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.autodockLabel = QtWidgets.QLabel(self.writeEngineGroupBox)
        self.autodockLabel.setObjectName("autodockLabel")
        self.gridLayout_3.addWidget(self.autodockLabel, 0, 0, 1, 2)
        self.autodockComboBox = QtWidgets.QComboBox(self.writeEngineGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.autodockComboBox.sizePolicy().hasHeightForWidth())
        self.autodockComboBox.setSizePolicy(sizePolicy)
        self.autodockComboBox.setObjectName("autodockComboBox")
        self.gridLayout_3.addWidget(self.autodockComboBox, 0, 2, 1, 1)
        self.receptorLabel = QtWidgets.QLabel(self.writeEngineGroupBox)
        self.receptorLabel.setObjectName("receptorLabel")
        self.gridLayout_3.addWidget(self.receptorLabel, 1, 0, 1, 1)
        self.receptorLineEdit = QtWidgets.QLineEdit(self.writeEngineGroupBox)
        self.receptorLineEdit.setObjectName("receptorLineEdit")
        self.gridLayout_3.addWidget(self.receptorLineEdit, 1, 1, 1, 2)
        self.browseReceptorButton = QtWidgets.QPushButton(self.writeEngineGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.browseReceptorButton.sizePolicy().hasHeightForWidth())
        self.browseReceptorButton.setSizePolicy(sizePolicy)
        self.browseReceptorButton.setObjectName("browseReceptorButton")
        self.gridLayout_3.addWidget(self.browseReceptorButton, 1, 3, 1, 1)
        self.gridLayout_2.addWidget(self.writeEngineGroupBox, 0, 0, 1, 1)
        self.writeInteractionsGroupBox = QtWidgets.QGroupBox(self.writeTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.writeInteractionsGroupBox.sizePolicy().hasHeightForWidth())
        self.writeInteractionsGroupBox.setSizePolicy(sizePolicy)
        self.writeInteractionsGroupBox.setObjectName("writeInteractionsGroupBox")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.writeInteractionsGroupBox)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.maxPosesLabel = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.maxPosesLabel.setObjectName("maxPosesLabel")
        self.gridLayout_5.addWidget(self.maxPosesLabel, 0, 0, 1, 1)
        self.maxPosesSpinBox = QtWidgets.QSpinBox(self.writeInteractionsGroupBox)
        self.maxPosesSpinBox.setObjectName("maxPosesSpinBox")
        self.gridLayout_5.addWidget(self.maxPosesSpinBox, 0, 1, 1, 1)
        self.storeAllPosesCheckBox = QtWidgets.QCheckBox(self.writeInteractionsGroupBox)
        self.storeAllPosesCheckBox.setObjectName("storeAllPosesCheckBox")
        self.gridLayout_5.addWidget(self.storeAllPosesCheckBox, 0, 2, 1, 1)
        self.addInteractionsCheckBox = QtWidgets.QCheckBox(self.writeInteractionsGroupBox)
        self.addInteractionsCheckBox.setObjectName("addInteractionsCheckBox")
        self.gridLayout_5.addWidget(self.addInteractionsCheckBox, 1, 0, 1, 1)
        self.distanceCutoffLabel = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.distanceCutoffLabel.setObjectName("distanceCutoffLabel")
        self.gridLayout_5.addWidget(self.distanceCutoffLabel, 2, 0, 1, 1)
        self.hCutoffLabel = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.hCutoffLabel.setObjectName("hCutoffLabel")
        self.gridLayout_5.addWidget(self.hCutoffLabel, 3, 0, 1, 1)
        self.hSpinBox = QtWidgets.QDoubleSpinBox(self.writeInteractionsGroupBox)
        self.hSpinBox.setObjectName("hSpinBox")
        self.gridLayout_5.addWidget(self.hSpinBox, 3, 1, 1, 1)
        self.vdwCutoffLabel = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.vdwCutoffLabel.setObjectName("vdwCutoffLabel")
        self.gridLayout_5.addWidget(self.vdwCutoffLabel, 4, 0, 1, 1)
        self.vdwSpinBox = QtWidgets.QDoubleSpinBox(self.writeInteractionsGroupBox)
        self.vdwSpinBox.setObjectName("vdwSpinBox")
        self.gridLayout_5.addWidget(self.vdwSpinBox, 4, 1, 1, 1)
        self.toleranceLabelAD = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.toleranceLabelAD.setObjectName("toleranceLabelAD")
        self.gridLayout_5.addWidget(self.toleranceLabelAD, 5, 0, 1, 1)
        self.toleranceSpinBox = QtWidgets.QDoubleSpinBox(self.writeInteractionsGroupBox)
        self.toleranceSpinBox.setObjectName("toleranceSpinBox")
        self.gridLayout_5.addWidget(self.toleranceSpinBox, 6, 0, 1, 1)
        self.gridLayout_2.addWidget(self.writeInteractionsGroupBox, 0, 1, 2, 1)
        self.writeLigandsGroupBox = QtWidgets.QGroupBox(self.writeTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.writeLigandsGroupBox.sizePolicy().hasHeightForWidth())
        self.writeLigandsGroupBox.setSizePolicy(sizePolicy)
        self.writeLigandsGroupBox.setObjectName("writeLigandsGroupBox")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.writeLigandsGroupBox)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.writeLigandsFromFileRadioButton = QtWidgets.QRadioButton(self.writeLigandsGroupBox)
        self.writeLigandsFromFileRadioButton.setObjectName("writeLigandsFromFileRadioButton")
        self.gridLayout_6.addWidget(self.writeLigandsFromFileRadioButton, 0, 0, 1, 3)
        self.writeLigandsFromDirectoryRadioButton = QtWidgets.QRadioButton(self.writeLigandsGroupBox)
        self.writeLigandsFromDirectoryRadioButton.setObjectName("writeLigandsFromDirectoryRadioButton")
        self.gridLayout_6.addWidget(self.writeLigandsFromDirectoryRadioButton, 0, 3, 1, 2)
        self.writeLigandsPatternLabel = QtWidgets.QLabel(self.writeLigandsGroupBox)
        self.writeLigandsPatternLabel.setObjectName("writeLigandsPatternLabel")
        self.gridLayout_6.addWidget(self.writeLigandsPatternLabel, 1, 0, 1, 1)
        self.writeLigandsPatternLineEdit = QtWidgets.QLineEdit(self.writeLigandsGroupBox)
        self.writeLigandsPatternLineEdit.setObjectName("writeLigandsPatternLineEdit")
        self.gridLayout_6.addWidget(self.writeLigandsPatternLineEdit, 1, 1, 1, 3)
        self.writeLigandsRecursiveCheckBox = QtWidgets.QCheckBox(self.writeLigandsGroupBox)
        self.writeLigandsRecursiveCheckBox.setTristate(False)
        self.writeLigandsRecursiveCheckBox.setObjectName("writeLigandsRecursiveCheckBox")
        self.gridLayout_6.addWidget(self.writeLigandsRecursiveCheckBox, 2, 0, 1, 2)
        self.writeLigandsSelectLabel = QtWidgets.QLabel(self.writeLigandsGroupBox)
        self.writeLigandsSelectLabel.setObjectName("writeLigandsSelectLabel")
        self.gridLayout_6.addWidget(self.writeLigandsSelectLabel, 3, 0, 1, 2)
        self.writeLigandsSelectLineEdit = QtWidgets.QLineEdit(self.writeLigandsGroupBox)
        self.writeLigandsSelectLineEdit.setObjectName("writeLigandsSelectLineEdit")
        self.gridLayout_6.addWidget(self.writeLigandsSelectLineEdit, 3, 2, 1, 2)
        self.writeLigandsSelectButton = QtWidgets.QPushButton(self.writeLigandsGroupBox)
        self.writeLigandsSelectButton.setObjectName("writeLigandsSelectButton")
        self.gridLayout_6.addWidget(self.writeLigandsSelectButton, 3, 4, 1, 1)
        self.gridLayout_2.addWidget(self.writeLigandsGroupBox, 1, 0, 1, 1)
        self.proceedButton = QtWidgets.QPushButton(self.writeTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.proceedButton.sizePolicy().hasHeightForWidth())
        self.proceedButton.setSizePolicy(sizePolicy)
        self.proceedButton.setObjectName("proceedButton")
        self.gridLayout_2.addWidget(self.proceedButton, 2, 1, 1, 1)
        self.tabWidget.addTab(self.writeTab, "")
        self.readTab = QtWidgets.QWidget()
        self.readTab.setObjectName("readTab")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.readTab)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.readPropertiesGroupBox = QtWidgets.QGroupBox(self.readTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readPropertiesGroupBox.sizePolicy().hasHeightForWidth())
        self.readPropertiesGroupBox.setSizePolicy(sizePolicy)
        self.readPropertiesGroupBox.setAutoFillBackground(False)
        self.readPropertiesGroupBox.setObjectName("readPropertiesGroupBox")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.readPropertiesGroupBox)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.readEnergyLabel = QtWidgets.QLabel(self.readPropertiesGroupBox)
        self.readEnergyLabel.setObjectName("readEnergyLabel")
        self.gridLayout_9.addWidget(self.readEnergyLabel, 1, 0, 1, 1)
        
        self.readLigandsEfficiencyLabel = QtWidgets.QLabel(self.readPropertiesGroupBox)
        self.readLigandsEfficiencyLabel.setObjectName("readLigandsEfficiencyLabel")
        self.gridLayout_9.addWidget(self.readLigandsEfficiencyLabel, 3, 0, 1, 2)
        self.readEnergySlider = RangeSlider(QtCore.Qt.Horizontal)
        self.readEnergySlider.setMinimumHeight(30)
        self.readEnergySlider.setObjectName("readAbsoluteEnergySlider")
        self.gridLayout_9.addWidget(self.readEnergySlider, 2, 1, 1, 2)
        self.readPercentileRadioButton = QtWidgets.QRadioButton(self.readPropertiesGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readPercentileRadioButton.sizePolicy().hasHeightForWidth())
        self.readPercentileRadioButton.setSizePolicy(sizePolicy)
        self.readPercentileRadioButton.setObjectName("readPercentileRadioButton")
        self.gridLayout_9.addWidget(self.readPercentileRadioButton, 0, 2, 1, 2)
        self.readAbsoluteRadioButton = QtWidgets.QRadioButton(self.readPropertiesGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readAbsoluteRadioButton.sizePolicy().hasHeightForWidth())
        self.readAbsoluteRadioButton.setSizePolicy(sizePolicy)
        self.readAbsoluteRadioButton.setObjectName("readAbsoluteRadioButton")
        self.gridLayout_9.addWidget(self.readAbsoluteRadioButton, 0, 0, 1, 2)
        self.readLigandsEfficiencySlider = RangeSlider(QtCore.Qt.Horizontal)
        self.readLigandsEfficiencySlider.setMinimumHeight(30)
        self.readLigandsEfficiencySlider.setObjectName("readAbsoluteLigandsEfficiencySlider")
        self.gridLayout_9.addWidget(self.readLigandsEfficiencySlider, 4, 1, 1, 2)
        self.gridLayout_8.addWidget(self.readPropertiesGroupBox, 0, 0, 1, 1)
        self.maxEnergySpinBox = QtWidgets.QDoubleSpinBox(self.readPropertiesGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.maxEnergySpinBox.sizePolicy().hasHeightForWidth())
        self.maxEnergySpinBox.setSizePolicy(sizePolicy)
        self.maxEnergySpinBox.setValue(self.readEnergySlider.maximum())
        self.maxEnergySpinBox.setObjectName("maxEnergySpinBox")
        self.gridLayout_9.addWidget(self.maxEnergySpinBox, 2, 3, 1, 1)
        self.minLigandsEfficiencySpinBox = QtWidgets.QDoubleSpinBox(self.readPropertiesGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.minLigandsEfficiencySpinBox.sizePolicy().hasHeightForWidth())
        self.minLigandsEfficiencySpinBox.setSizePolicy(sizePolicy)
        self.minLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.minimum()/100)
        self.minLigandsEfficiencySpinBox.setObjectName("minLigandsEfficiencySpinBox")
        self.gridLayout_9.addWidget(self.minLigandsEfficiencySpinBox, 4, 0, 1, 1)
        self.minEnergySpinBox = QtWidgets.QDoubleSpinBox(self.readPropertiesGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.maxEnergySpinBox.sizePolicy().hasHeightForWidth())
        self.minEnergySpinBox.setSizePolicy(sizePolicy)
        self.minEnergySpinBox.setValue(self.readEnergySlider.minimum())
        self.minEnergySpinBox.setObjectName("minEnergySpinBox")
        self.gridLayout_9.addWidget(self.minEnergySpinBox, 2, 0, 1, 1)
        self.maxLigandsEfficiencySpinBox = QtWidgets.QDoubleSpinBox(self.readPropertiesGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.maxLigandsEfficiencySpinBox.sizePolicy().hasHeightForWidth())
        self.maxLigandsEfficiencySpinBox.setSizePolicy(sizePolicy)
        self.maxLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.maximum()/100)
        self.maxLigandsEfficiencySpinBox.setObjectName("maxLigandsEfficiencySpinBox")
        self.gridLayout_9.addWidget(self.maxLigandsEfficiencySpinBox, 4, 3, 1, 1)
        self.resultsGroupbox = QtWidgets.QGroupBox(self.readTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resultsGroupbox.sizePolicy().hasHeightForWidth())
        self.resultsGroupbox.setSizePolicy(sizePolicy)
        self.resultsGroupbox.setObjectName("resultsGroupbox")
        self.gridLayout_8.addWidget(self.resultsGroupbox, 0, 1, 4, 1)
        self.readLigandsGroupBox = QtWidgets.QGroupBox(self.readTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readLigandsGroupBox.sizePolicy().hasHeightForWidth())
        self.readLigandsGroupBox.setSizePolicy(sizePolicy)
        self.readLigandsGroupBox.setObjectName("readLigandsGroupBox")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.readLigandsGroupBox)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.readLigandAddButton = QtWidgets.QPushButton(self.readLigandsGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readLigandAddButton.sizePolicy().hasHeightForWidth())
        self.readLigandAddButton.setSizePolicy(sizePolicy)
        self.readLigandAddButton.setText("")
        icon = QtGui.QIcon.fromTheme("add")
        self.readLigandAddButton.setIcon(icon)
        self.readLigandAddButton.setObjectName("readLigandAddButton")
        self.gridLayout_7.addWidget(self.readLigandAddButton, 0, 1, 1, 1)
        self.readLigandDeleteButton = QtWidgets.QPushButton(self.readLigandsGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readLigandDeleteButton.sizePolicy().hasHeightForWidth())
        self.readLigandDeleteButton.setSizePolicy(sizePolicy)
        self.readLigandDeleteButton.setText("")
        icon = QtGui.QIcon.fromTheme("remove")
        self.readLigandDeleteButton.setIcon(icon)
        self.readLigandDeleteButton.setObjectName("readLigandDeleteButton")
        self.gridLayout_7.addWidget(self.readLigandDeleteButton, 0, 2, 1, 1)
        self.readLigandEditButton = QtWidgets.QPushButton(self.readLigandsGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readLigandEditButton.sizePolicy().hasHeightForWidth())
        self.readLigandEditButton.setSizePolicy(sizePolicy)
        self.readLigandEditButton.setText("")
        icon = QtGui.QIcon.fromTheme("edit")
        self.readLigandEditButton.setIcon(icon)
        self.readLigandEditButton.setObjectName("readLigandEditButton")
        self.gridLayout_7.addWidget(self.readLigandEditButton, 0, 3, 1, 1)
        self.readLigandEnableButton = QtWidgets.QPushButton(self.readLigandsGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readLigandEnableButton.sizePolicy().hasHeightForWidth())
        self.readLigandEnableButton.setSizePolicy(sizePolicy)
        self.readLigandEnableButton.setText("")
        self.readLigandEnableButton.setIcon(QtGui.QIcon(":enable_disable_icon.png"))
        self.readLigandEnableButton.setObjectName("readLigandEnableButton")
        self.gridLayout_7.addWidget(self.readLigandEnableButton, 0, 4, 1, 1)
        self.readLigandListWidget = QtWidgets.QListWidget(self.readLigandsGroupBox)
        self.readLigandListWidget.setObjectName("readLigandListWidget")
        self.gridLayout_7.addWidget(self.readLigandListWidget, 1, 0, 1, 5)
        self.readLigandLabel = QtWidgets.QLabel(self.readLigandsGroupBox)
        self.readLigandLabel.setObjectName("readLigandLabel")
        self.gridLayout_7.addWidget(self.readLigandLabel, 0, 0, 1, 1)
        self.gridLayout_8.addWidget(self.readLigandsGroupBox, 1, 0, 1, 1)
        self.readInteractionsGroupBox = QtWidgets.QGroupBox(self.readTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readInteractionsGroupBox.sizePolicy().hasHeightForWidth())
        self.readInteractionsGroupBox.setSizePolicy(sizePolicy)
        self.readInteractionsGroupBox.setObjectName("readInteractionsGroupBox")
        
        self.gridLayout_10 = QtWidgets.QGridLayout(self.readInteractionsGroupBox)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.readInteractionsAddButton = QtWidgets.QPushButton(self.readInteractionsGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readInteractionsAddButton.sizePolicy().hasHeightForWidth())
        self.readInteractionsAddButton.setSizePolicy(sizePolicy)
        self.readInteractionsAddButton.setText("")
        icon = QtGui.QIcon.fromTheme("add")
        self.readInteractionsAddButton.setIcon(icon)
        self.readInteractionsAddButton.setObjectName("readInteractionsAddButton")
        self.gridLayout_10.addWidget(self.readInteractionsAddButton, 0, 1, 1, 1)
        self.readInteractionsDeleteButton = QtWidgets.QPushButton(self.readInteractionsGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readInteractionsDeleteButton.sizePolicy().hasHeightForWidth())
        self.readInteractionsDeleteButton.setSizePolicy(sizePolicy)
        self.readInteractionsDeleteButton.setText("")
        icon = QtGui.QIcon.fromTheme("remove")
        self.readInteractionsDeleteButton.setIcon(icon)
        self.readInteractionsDeleteButton.setObjectName("readInteractionsDeleteButton")
        self.gridLayout_10.addWidget(self.readInteractionsDeleteButton, 0, 2, 1, 1)
        self.readInteractionsEditButton = QtWidgets.QPushButton(self.readInteractionsGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readInteractionsEditButton.sizePolicy().hasHeightForWidth())
        self.readInteractionsEditButton.setSizePolicy(sizePolicy)
        self.readInteractionsEditButton.setText("")
        icon = QtGui.QIcon.fromTheme("edit")
        self.readInteractionsEditButton.setIcon(icon)
        self.readInteractionsEditButton.setObjectName("readInteractionsEditButton")
        self.gridLayout_10.addWidget(self.readInteractionsEditButton, 0, 3, 1, 1)
        self.readInteractionsEnableButton = QtWidgets.QPushButton(self.readInteractionsGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readInteractionsEnableButton.sizePolicy().hasHeightForWidth())
        self.readInteractionsEnableButton.setSizePolicy(sizePolicy)
        self.readInteractionsEnableButton.setText("")
        self.readInteractionsEnableButton.setIcon(QtGui.QIcon(":enable_disable_icon.png"))
        self.readInteractionsEnableButton.setObjectName("readInteractionsEnableButton")
        self.gridLayout_10.addWidget(self.readInteractionsEnableButton, 0, 4, 1, 1)
        self.readInteractionsListWidget = QtWidgets.QListWidget(self.readInteractionsGroupBox)
        self.readInteractionsListWidget.setObjectName("readInteractionsListWidget")
        self.gridLayout_10.addWidget(self.readInteractionsListWidget, 1, 0, 1, 5)
        self.readInteractionsLabel = QtWidgets.QLabel(self.readInteractionsGroupBox)
        self.readInteractionsLabel.setObjectName("readInteractionsLabel")
        self.gridLayout_10.addWidget(self.readInteractionsLabel, 0, 0, 1, 1)
        
        self.gridLayout_8.addWidget(self.readInteractionsGroupBox, 2, 0, 1, 1)
        self.readProceedButton = QtWidgets.QPushButton(self.readTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.readProceedButton.sizePolicy().hasHeightForWidth())
        self.readProceedButton.setSizePolicy(sizePolicy)
        self.readProceedButton.setObjectName("readProceedButton")
        self.gridLayout_8.addWidget(self.readProceedButton, 3, 0, 1, 1)
        self.tabWidget.addTab(self.readTab, "")
        self.gridLayout.addWidget(self.tabWidget, 1, 0, 1, 5)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        #-----------------------------------------------------------------#
        # TAB
        self.tabWidget.tabBarClicked.connect(self.handle_enables_for_read_tab)
        
        # WRITE
        self.autodockComboBox.currentIndexChanged.connect(self.set_engine)
        self.numberOfProcessorsBox.valueChanged.connect(self.set_number_of_processors)
        self.hSpinBox.valueChanged.connect(self.set_h_cutoff_distance)
        self.vdwSpinBox.valueChanged.connect(self.set_vdw_cutoff_distance)
        self.toleranceSpinBox.valueChanged.connect(self.set_tolerance)
        self.maxPosesSpinBox.valueChanged.connect(self.set_number_of_poses)
        self.dbLineEdit.textChanged.connect(self.enable_process)
        self.writeLigandsPatternLineEdit.textChanged.connect(self.set_ligands_pattern)
        self.writeLigandsSelectLineEdit.textChanged.connect(self.set_ligands_selection)
        self.receptorLineEdit.textChanged.connect(self.set_receptor_filename)
        self.writeLigandsPatternLineEdit.textChanged.connect(self.set_pattern)
        
        self.loadDbButton.clicked.connect(self.select_db)
        self.browseReceptorButton.clicked.connect(self.select_receptor)
        self.proceedButton.clicked.connect(self.proceed_write_analysis)
        self.createDbButton.clicked.connect(self.create_db)
        self.storeAllPosesCheckBox.clicked.connect(self.set_store_all_poses)
        self.verboseRadioButton.clicked.connect(self.set_verbose)
        self.debugRadioButton.clicked.connect(self.set_debug)
        self.writeLigandsFromDirectoryRadioButton.clicked.connect(self.enable_ligands_from_directory)
        self.writeLigandsFromFileRadioButton.clicked.connect(self.enable_ligands_from_file)
        self.writeLigandsRecursiveCheckBox.clicked.connect(self.set_ligands_recursive_search)
        self.writeLigandsSelectButton.clicked.connect(self.select_ligands_sources)
        self.addInteractionsCheckBox.clicked.connect(self.set_add_interactions)
                
        # READ
        self.readAbsoluteRadioButton.clicked.connect(self.set_absolute_or_percentile)
        self.readPercentileRadioButton.clicked.connect(self.set_absolute_or_percentile)
        self.readEnergySlider.sliderMoved.connect(self.update_energy_spinboxes)
        self.maxEnergySpinBox.valueChanged.connect(self.update_energy_slider_max)
        self.minEnergySpinBox.valueChanged.connect(self.update_energy_slider_min)
        self.readLigandsEfficiencySlider.sliderMoved.connect(self.update_ligands_spinboxes)
        self.maxLigandsEfficiencySpinBox.valueChanged.connect(self.update_ligand_slider_max)
        self.minLigandsEfficiencySpinBox.valueChanged.connect(self.update_ligand_slider_min)
        
        # Ligand filter
        self.readLigandListWidget.itemClicked.connect(self.item_selected_from_ligands_list)
        self.readLigandAddButton.clicked.connect(self.add_ligand)
        self.readLigandDeleteButton.clicked.connect(self.delete_ligand)
        self.readLigandEditButton.clicked.connect(self.edit_ligand)
        self.readLigandEnableButton.clicked.connect(self.enable_ligand_item)
        
        # Interactions filter
        self.readInteractionsListWidget.itemClicked.connect(self.item_selected_from_interactions_list)
        self.readInteractionsAddButton.clicked.connect(self.add_interaction)
        self.readInteractionsDeleteButton.clicked.connect(self.delete_interaction)
        self.readInteractionsEditButton.clicked.connect(self.edit_interaction)
        self.readInteractionsEnableButton.clicked.connect(self.enable_interaction_item)
        
        # self.readLigandListWidget.itemChanged.connect(self.set_edited_item)
        # self.readProceedButton.clicked.connect(self.get_ligand_names_from_widget)
        #-----------------------------------------------------------------#
        
                # INITIALIZATION
        #-----------------------------------------------------------------#
        self.populate_engine_combo()
        self.set_default_number_of_processors()
        self.set_default_cutoffs()
        self.disable_everything()
        self.verboseRadioButton.click()
        
        # READ
        # self.readAbsoluteRadioButton.click()
        #-----------------------------------------------------------------#
        
    # CLASS METHODS
    #-----------------------------------------------------------------#
    def handle_enables_for_read_tab(self, index):
        if index == self.tabWidget.indexOf(self.readTab):
            self.createDbButton.setEnabled(False)
            self.numberOfProcessorsBox.setEnabled(False)
        else:
            self.createDbButton.setEnabled(True)
            self.numberOfProcessorsBox.setEnabled(True)
    
    def enable_read_tab(self):
        self.readPropertiesGroupBox.setEnabled(True)
        self.readLigandsGroupBox.setEnabled(True)
        self.readInteractionsGroupBox.setEnabled(True)
        self.readAbsoluteRadioButton.click()
    
    def disable_everything(self):
        self.writeEngineGroupBox.setEnabled(False)
        self.writeLigandsGroupBox.setEnabled(False)
        self.writeInteractionsGroupBox.setEnabled(False)
        self.proceedButton.setEnabled(False)
        self.readPropertiesGroupBox.setEnabled(False)
        self.readLigandsGroupBox.setEnabled(False)
        self.readInteractionsGroupBox.setEnabled(False)        
    
    def enable_receptor_groupBox(self):
        self.writeEngineGroupBox.setEnabled(True)
        
    def enable_ligands_groupBox(self):
        self.writeLigandsGroupBox.setEnabled(True)
        self.writeLigandsFromFileRadioButton.click()

    def enable_interactions_groupBox(self):
        self.writeInteractionsGroupBox.setEnabled(True)
    
    # GENERAL
    def create_db(self):
        self.db = save_file()[0]
        self.dbLineEdit.setText(self.db)
        if self.db is not None:
            self.enable_receptor_groupBox()
            self.enable_read_tab()
        
    def select_db(self):
        self.db = browse_file("All Files (*);;Db Files (*.db)")[0]
        if self.db != "":
            self.dbLineEdit.setText(self.db)
            if self.db is not None:
                self.enable_receptor_groupBox()
                self.enable_read_tab()
        
    def set_debug(self):
        if self.debugRadioButton.isChecked():
            self.debug = True
            self.verbose = False
        else:
            self.debug = False
            self.verbose = True
            
    def set_verbose(self):
        if self.verboseRadioButton.isChecked():
            self.debug = False
            self.verbose = True
        else:
            self.debug = True
            self.verbose = False
    
    def set_default_number_of_processors(self):
        self.numberOfProcessorsBox.setValue(self.numberOfProcessorsBox
                                            .maximum())
        self.processors_number = int(self.numberOfProcessorsBox.value())
    
    def set_number_of_processors(self):
        self.processors_number = self.numberOfProcessorsBox.value()
    #-----------------------------------------------------------------#

    
    # WRITE
    def proceed_write_analysis(self):
        show_message("Starts the analysis!", 0)
        
    def enable_process(self):
        print(self.dbLineEdit.text())
        if self.dbLineEdit.text() == "":
            self.db = None
            self.disable_everything()
        if self.db is not None and self.receptor_file is not None:
            self.proceedButton.setEnabled(True)
        else:
            self.proceedButton.setEnabled(False)
    #-----------------------------------------------------------------#
        
    def set_add_interactions(self):
        if self.addInteractionsCheckBox.isChecked():
            self.hSpinBox.setEnabled(True)
            self.vdwSpinBox.setEnabled(True)
        else:
            self.hSpinBox.setEnabled(False)
            self.vdwSpinBox.setEnabled(False)
            self.h_cutoff_distance = None
            self.vdw_cutoff_distance = None
    
    # WRITE -> RECEPTOR
    def select_receptor(self):
        self.receptorLineEdit.setText(browse_file("All Files (*)")[0])
        
    def set_receptor_filename(self):
        self.receptor_file = self.receptorLineEdit.text()
        if self.receptor_file == "":
            self.receptor_file = None
        if self.receptor_file is not None:
            self.enable_process()
            self.enable_ligands_groupBox()
            self.enable_interactions_groupBox()
    
    def set_engine(self):
        self.selected_engine = self.autodockComboBox.currentText()
        if self.selected_engine == 'AutoDockGPU':
            self.toleranceLabelAD.setVisible(True)
            self.toleranceSpinBox.setVisible(True)
            self.toleranceSpinBox.setEnabled(True)
            self.addInteractionsCheckBox.setChecked(False)
            self.hSpinBox.setEnabled(False)
            self.vdwSpinBox.setEnabled(False)
            self.ligands_directory_pattern = "*.dlg*"
        else:
            self.addInteractionsCheckBox.setChecked(True)
            self.hSpinBox.setEnabled(True)
            self.vdwSpinBox.setEnabled(True)
            self.toleranceLabelAD.setVisible(False)
            self.toleranceSpinBox.setVisible(False)
            self.toleranceSpinBox.setEnabled(False)    
            self.ligands_directory_pattern = "*.pdbqt*"
        self.set_pattern(self.ligands_directory_pattern)
            
    def populate_engine_combo(self):
        for engine in self.engine_types:
            self.autodockComboBox.addItem(engine)
            self.autodockComboBox.itemData
        self.autodockComboBox.currentIndex = 0
    #-----------------------------------------------------------------#
    
    # WRITE -> LIGANDS
    def set_pattern(self, default=None):
        if default is None:
            self.ligands_directory_pattern = self.writeLigandsPatternLineEdit.text()
        else:
            self.writeLigandsPatternLineEdit.setText(default)
            
    def enable_ligands_from_file(self):
        if self.writeLigandsFromFileRadioButton.isChecked():
            self.writeLigandsRecursiveCheckBox.setEnabled(False)
            self.writeLigandsRecursiveCheckBox.setVisible(False)
            self.recursive = False
            self.writeLigandsPatternLabel.setVisible(False)
            self.writeLigandsPatternLineEdit.setEnabled(False)
            self.writeLigandsPatternLineEdit.setVisible(False)
            self.ligands_directory_pattern = None
            self.ligands_directory = None
            self.writeLigandsSelectLineEdit.setText("")
    
    def enable_ligands_from_directory(self):
        if self.writeLigandsFromDirectoryRadioButton.isChecked():
            self.writeLigandsRecursiveCheckBox.setEnabled(True)
            self.writeLigandsRecursiveCheckBox.setVisible(True)
            self.recursive = False
            self.writeLigandsPatternLabel.setVisible(True)
            self.writeLigandsPatternLineEdit.setEnabled(True)
            self.writeLigandsPatternLineEdit.setVisible(True)
            self.ligands_directory_pattern = None
            self.ligands_directory = None
            self.writeLigandsSelectLineEdit.setText("")
    
    def set_ligands_pattern(self):
        if self.writeLigandsPatternLineEdit.text() != "":
            self.ligands_directory_pattern = self.writeLigandsPatternLineEdit.text()
        else:
            self.ligands_directory_pattern = None
    
    def set_ligands_recursive_search(self):
        if self.writeLigandsRecursiveCheckBox.isChecked():
            self.recursive = True
        else:
            self.recursive = False
            
    def select_ligands_sources(self):
        if self.writeLigandsFromDirectoryRadioButton.isChecked():
            self.ligands_directory = browse_directory()
            self.ligands_file = None
            self.writeLigandsSelectLineEdit.setText(self.ligands_directory)
        elif self.writeLigandsFromFileRadioButton.isChecked():
            self.ligands_file = browse_file()[0]
            self.ligands_directory = None
            self.writeLigandsSelectLineEdit.setText(self.ligands_file)
        
    def set_ligands_selection(self):
        if self.writeLigandsSelectLineEdit.text() == "":
            self.ligands_directory = None
            self.ligands_file = None
    #-----------------------------------------------------------------#

    # WRITE -> PROPERTIES
    def set_default_cutoffs(self):
        self.hSpinBox.setValue(3.7)
        self.vdwSpinBox.setValue(4.0)
    
    def set_h_cutoff_distance(self):
        self.h_cutoff_distance = float(self.hSpinBox.value())
        
    def set_vdw_cutoff_distance(self):
        self.vdw_cutoff_distance = float(self.vdwSpinBox.value())
    
    def set_store_all_poses(self):
        if self.storeAllPosesCheckBox.isChecked():
            self.maxPosesSpinBox.setValue(500)
            self.maxPosesSpinBox.setEnabled(False)
            self.store_all_poses = True
        else:
            self.maxPosesSpinBox.setValue(3)
            self.maxPosesSpinBox.setEnabled(True)
            self.store_all_poses = False
        self.max_poses = int(self.maxPosesSpinBox.value())
        
    def set_number_of_poses(self):
        self.max_poses = int(self.maxPosesSpinBox.value())
            
    def set_tolerance(self):
        if self.selected_engine == 'AutoDockGPU':
            self.tolerance = float(self.toleranceSpinBox.value())
        else:
            self.tolerance = None
    #-----------------------------------------------------------------#

    # READ -> PROPERTIES
    def set_absolute_or_percentile(self):
        if self.readAbsoluteRadioButton.isChecked():
            self.absolute = True
            self.percentile = False
            self.hide_sliders(False)
            energy_max, energy_min = get_energy_max_min()
            lig_eff_max, lig_eff_min = get_ligands_efficiency_max_min()
            self.readEnergySlider.setMaximum(energy_max)
            self.readEnergySlider.setMinimum(energy_min)
            self.readEnergySlider.setHigh(self.readEnergySlider.maximum())
            self.readEnergySlider.setLow(self.readEnergySlider.minimum())
            self.readLigandsEfficiencySlider.setMaximum(lig_eff_max)
            self.readLigandsEfficiencySlider.setMinimum(lig_eff_min)
            self.readLigandsEfficiencySlider.setHigh(self.readLigandsEfficiencySlider.maximum())
            self.readLigandsEfficiencySlider.setLow(self.readLigandsEfficiencySlider.minimum())
        elif self.readPercentileRadioButton.isChecked():
            self.percentile = True
            self.absolute = False
            self.hide_sliders(True)
        self.setup_spinboxes()
            
    
    def hide_sliders(self, hide):
        if hide:
            self.readEnergySlider.setVisible(False)
            self.readEnergySlider.setEnabled(False)
            self.readLigandsEfficiencySlider.setVisible(False)
            self.readLigandsEfficiencySlider.setEnabled(False)
            self.maxLigandsEfficiencySpinBox.setVisible(False)
            self.maxLigandsEfficiencySpinBox.setEnabled(False)
            self.maxEnergySpinBox.setVisible(False)
            self.maxEnergySpinBox.setEnabled(False)
        else:
            self.readEnergySlider.setVisible(True)
            self.readEnergySlider.setEnabled(True)
            self.readLigandsEfficiencySlider.setVisible(True)
            self.readLigandsEfficiencySlider.setEnabled(True)
            self.maxLigandsEfficiencySpinBox.setVisible(True)
            self.maxLigandsEfficiencySpinBox.setEnabled(True)
            self.maxEnergySpinBox.setVisible(True)
            self.maxEnergySpinBox.setEnabled(True)
            
    def setup_spinboxes(self):
        if self.readAbsoluteRadioButton.isChecked():
            self.maxEnergySpinBox.setMaximum(self.readEnergySlider.maximum())
            self.maxEnergySpinBox.setMinimum(self.readEnergySlider.minimum())
            self.maxEnergySpinBox.setValue(self.readEnergySlider.high())
            self.minEnergySpinBox.setMaximum(self.readEnergySlider.maximum())
            self.minEnergySpinBox.setMinimum(self.readEnergySlider.minimum())
            self.minEnergySpinBox.setValue(self.readEnergySlider.low())
            self.maxLigandsEfficiencySpinBox.setMaximum(self.readLigandsEfficiencySlider.maximum()/1000)
            self.maxLigandsEfficiencySpinBox.setMinimum(self.readLigandsEfficiencySlider.minimum()/1000)
            self.maxLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.high())
            self.minLigandsEfficiencySpinBox.setMaximum(self.readLigandsEfficiencySlider.maximum()/1000)
            self.minLigandsEfficiencySpinBox.setMinimum(self.readLigandsEfficiencySlider.minimum()/1000)
            self.minLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.low())
        else:
            self.minEnergySpinBox.setMaximum(100)
            self.minEnergySpinBox.setMinimum(0)
            self.minLigandsEfficiencySpinBox.setMaximum(100)
            self.minLigandsEfficiencySpinBox.setMinimum(0)
    
    def update_energy_spinboxes(self):
        self.maxEnergySpinBox.setValue(self.readEnergySlider.high())
        self.minEnergySpinBox.setValue(self.readEnergySlider.low())
    
    def update_energy_slider_max(self):
        self.readEnergySlider.setHigh(int(self.maxEnergySpinBox.value()))
        if self.absolute:
            self.energy_percentile = None
            self.energy_range = (self.maxEnergySpinBox.value(), self.minEnergySpinBox.value())

    
    def update_energy_slider_min(self):
        self.readEnergySlider.setLow(int(self.minEnergySpinBox.value()))
        if self.absolute:
            self.energy_percentile = None
            self.energy_range = (self.maxEnergySpinBox.value(), self.minEnergySpinBox.value())
        elif self.percentile:
            self.energy_range = (None, None)
            self.energy_percentile = self.minEnergySpinBox.value()
        
    def update_ligands_spinboxes(self):
        self.maxLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.high() / 1000)
        self.minLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.low() / 1000)
        
    def update_ligand_slider_max(self):
        self.readLigandsEfficiencySlider.setHigh(int(self.maxLigandsEfficiencySpinBox.value() * 1000))
        if self.absolute:
            self.ligands_efficiency_percentile = None
            self.ligands_efficiency_range = (self.maxLigandsEfficiencySpinBox.value(), self.minLigandsEfficiencySpinBox.value())
        
    def update_ligand_slider_min(self):
        self.readLigandsEfficiencySlider.setLow(int(self.minLigandsEfficiencySpinBox.value() * 1000))
        if self.absolute:
            self.ligands_efficiency_range = (self.maxLigandsEfficiencySpinBox.value(), self.minLigandsEfficiencySpinBox.value())
            self.ligands_efficiency_percentile = None
        elif self.percentile:
            self.ligands_efficiency_range = (None, None)
            self.ligands_efficiency_percentile = self.minLigandsEfficiencySpinBox.value()
        
    # READ -> LIGAND
    def item_selected_from_ligands_list(self, item):
        self.selected_ligand_name_from_list = item
        
    def add_ligand(self):
        self.ligand_ui = Ligand_Dialog()
        if self.ligand_ui.exec_():
            self.ligand_filter = self.ligand_ui.ligand_filter
            if self.ligand_filter is not None:
                f = self.ligand_filter.__str__()
                self.ligands.append(self.ligand_filter)
                self.readLigandListWidget.addItem(f)
                if self.ligand_filter.enabled:
                    self.readLigandListWidget.item(self.readLigandListWidget.count()-1).setIcon(QtGui.QIcon(":enabled_icon.svg"))
                else:
                    self.readLigandListWidget.item(self.readLigandListWidget.count()-1).setIcon(QtGui.QIcon(":disabled_icon.svg"))
            
    def delete_ligand(self):
        if self.selected_ligand_name_from_list is not None:
            for idx in range(0, self.readLigandListWidget.count()):
                if self.readLigandListWidget.item(idx) == self.selected_ligand_name_from_list:
                    self.readLigandListWidget.takeItem(idx)
                    del self.ligands[idx]
                    self.selected_ligand_name_from_list = None
                    print(f"Delete {self.ligands}")
                    break
    
    def edit_ligand(self):
        if self.selected_ligand_name_from_list is not None:
            for idx in range(0, self.readLigandListWidget.count()):
                if self.readLigandListWidget.item(idx) == self.selected_ligand_name_from_list:
                    self.ligand_ui = Ligand_Dialog(self.selected_ligand_name_from_list)
                    if self.ligand_ui.exec_():
                        self.ligand_filter = self.ligand_ui.ligand_filter
                        if self.ligand_filter is not None:
                            f = self.ligand_filter.__str__()
                            self.readLigandListWidget.takeItem(idx)
                            self.readLigandListWidget.insertItem(idx, f)
                            if self.ligand_filter.enabled:
                                self.readLigandListWidget.item(idx).setIcon(QtGui.QIcon(":enabled_icon.svg"))
                            else:
                                self.readLigandListWidget.item(idx).setIcon(QtGui.QIcon(":disabled_icon.svg"))
                    break
    
    def enable_ligand_item(self):
        for idx in range(0, self.readLigandListWidget.count()):
            if self.readLigandListWidget.item(idx) == self.selected_ligand_name_from_list:
                if self.ligands[idx].enabled is True:
                    self.ligands[idx].set_wanted(False)
                    self.readLigandListWidget.item(idx).setIcon(QtGui.QIcon(":disabled_icon.svg"))
                else:
                    self.ligands[idx].set_wanted(True)
                    self.readLigandListWidget.item(idx).setIcon(QtGui.QIcon(":enabled_icon.svg"))
                self.readLigandListWidget.item(idx).setText(self.ligands[idx].__str__())
                break
    
    # READ -> INTERACTIONS
    def item_selected_from_interactions_list(self, item):
        self.selected_interaction_from_list = item
    
    def add_interaction(self):
        self.interaction_ui = Interaction_Dialog(list_example, self.window)
        if self.interaction_ui.exec_():
            self.interaction_filter = self.interaction_ui.filter
            if self.interaction_filter is not None:
                f = self.interaction_filter.__str__()
                self.interactions.append(self.interaction_filter)
                self.readInteractionsListWidget.addItem(f)
                if self.interaction_filter.wanted:
                    self.readInteractionsListWidget.item(self.readInteractionsListWidget.count()-1).setIcon(QtGui.QIcon(":enabled_icon.svg"))
                else:
                    self.readInteractionsListWidget.item(self.readInteractionsListWidget.count()-1).setIcon(QtGui.QIcon(":disabled_icon.svg"))
                    
    def delete_interaction(self):
        if self.selected_interaction_from_list is not None:
            for idx in range(0, self.readInteractionsListWidget.count()):
                if self.readInteractionsListWidget.item(idx) == self.selected_interaction_from_list:
                    self.readInteractionsListWidget.takeItem(idx)
                    del self.interactions[idx]
                    self.selected_interaction_from_list = None
                    print(f"Delete {self.interactions}")
                    break
    
    def edit_interaction(self, item):
        if self.selected_interaction_from_list is not None:
            for idx in range(0, self.readInteractionsListWidget.count()):
                if self.readInteractionsListWidget.item(idx) == self.selected_interaction_from_list:
                    self.interaction_ui = Interaction_Dialog(list_example, self.window, self.selected_interaction_from_list)
                    if self.interaction_ui.exec_():
                        self.interaction_filter = self.interaction_ui.filter
                        if self.interaction_filter is not None:
                            f = self.interaction_filter.__str__()
                            self.readInteractionsListWidget.takeItem(idx)
                            self.readInteractionsListWidget.insertItem(idx, f)
                            if self.interaction_filter.wanted:
                                self.readInteractionsListWidget.item(idx).setIcon(QtGui.QIcon(":enabled_icon.svg"))
                            else:
                                self.readInteractionsListWidget.item(idx).setIcon(QtGui.QIcon(":disabled_icon.svg"))
                    break
    
    def enable_interaction_item(self):
        for idx in range(0, self.readInteractionsListWidget.count()):
            if self.readInteractionsListWidget.item(idx) == self.selected_interaction_from_list:
                if self.interactions[idx].wanted is True:
                    self.interactions[idx].set_wanted(False)
                    self.readInteractionsListWidget.item(idx).setIcon(QtGui.QIcon(":disabled_icon.svg"))
                else:
                    self.interactions[idx].set_wanted(True)
                    self.readInteractionsListWidget.item(idx).setIcon(QtGui.QIcon(":enabled_icon.svg"))
                self.readInteractionsListWidget.item(idx).setText(self.interactions[idx].__str__())
                break
    
    
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Mock RingTail"))
        self.generalPropertiesBox.setTitle(_translate("MainWindow", "Advanced options:"))
        self.numberOfProcessorsLabel.setText(_translate("MainWindow", "Processors #:"))
        self.verboseRadioButton.setText(_translate("MainWindow", "Verbose"))
        self.debugRadioButton.setText(_translate("MainWindow", "Debug"))
        self.createDbButton.setText(_translate("MainWindow", "Create"))
        self.loadDbButton.setText(_translate("MainWindow", "Load"))
        self.dbLabel.setText(_translate("MainWindow", "Select database file:"))
        self.writeEngineGroupBox.setTitle(_translate("MainWindow", "Receptor:"))
        self.autodockLabel.setText(_translate("MainWindow", "Select docking engine:"))
        self.receptorLabel.setText(_translate("MainWindow", "Select receptor(s):"))
        self.browseReceptorButton.setText(_translate("MainWindow", "Browse"))
        self.writeInteractionsGroupBox.setTitle(_translate("MainWindow", "Interactions:"))
        self.maxPosesLabel.setText(_translate("MainWindow", "Max poses:"))
        self.storeAllPosesCheckBox.setText(_translate("MainWindow", "Store all poses"))
        self.distanceCutoffLabel.setText(_translate("MainWindow", "Distance cutoff:"))
        self.hCutoffLabel.setText(_translate("MainWindow", "Hb"))
        self.vdwCutoffLabel.setText(_translate("MainWindow", "vdW"))
        self.toleranceLabelAD.setText(_translate("MainWindow", "Tolerance:"))
        self.addInteractionsCheckBox.setText(_translate("MainWindow", "Add interactions"))
        self.writeLigandsGroupBox.setTitle(_translate("MainWindow", "Ligands:"))
        self.writeLigandsFromFileRadioButton.setText(_translate("MainWindow", "From file"))
        self.writeLigandsFromDirectoryRadioButton.setText(_translate("MainWindow", "From directory"))
        self.writeLigandsPatternLabel.setText(_translate("MainWindow", "Pattern:"))
        self.writeLigandsRecursiveCheckBox.setText(_translate("MainWindow", "Recursive"))
        self.writeLigandsSelectLabel.setText(_translate("MainWindow", "Ligand filter(s):"))
        self.writeLigandsSelectButton.setText(_translate("MainWindow", "Add ..."))
        self.proceedButton.setText(_translate("MainWindow", "Process"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.writeTab), _translate("MainWindow", "Write"))
        self.readPropertiesGroupBox.setTitle(_translate("MainWindow", "Properties"))
        self.readEnergyLabel.setText(_translate("MainWindow", "Energy:"))
        self.readLigandsEfficiencyLabel.setText(_translate("MainWindow", "Ligands efficiency:"))
        self.readPercentileRadioButton.setText(_translate("MainWindow", "Percentile"))
        self.readAbsoluteRadioButton.setText(_translate("MainWindow", "Absolute"))
        self.resultsGroupbox.setTitle(_translate("MainWindow", "Results"))
        self.readLigandsGroupBox.setTitle(_translate("MainWindow", "Ligand"))
        self.readLigandLabel.setText(_translate("MainWindow", "Ligands"))
        self.readInteractionsGroupBox.setTitle(_translate("MainWindow", "Interaction"))
        self.readProceedButton.setText(_translate("MainWindow", "Process"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.readTab), _translate("MainWindow", "Read"))
        self.readInteractionsLabel.setText(_translate("MainWindow", "Interactions"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
