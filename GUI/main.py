# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI/main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import os
ringtail_gui_path = os.path.realpath(os.path.dirname(__file__))
sys.path.append(ringtail_gui_path)


from PyQt5 import QtCore, QtGui, QtWidgets
from utils import show_message, browse_directory, browse_file, save_file, get_energy_max_min, get_ligands_efficiency_max_min
from range_slider import RangeSlider
import multiprocessing


class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.db = None
        self.engine_types = ["AutoDock", "Vina"]
        self.selected_engine = None
        self.processors_number = None        
        self.verbose = False
        self.debug = False
        
        # WRITE
        # Interactions
        self.add_interactions = False
        self.h_cutoff_distance = None
        self.vdw_cutoff_distance = None        
        self.tolerance = None
        self.max_poses = None
        self.store_all_poses = False
        
        # Ligands
        self.recursive = False
        self.ligands_directory = None
        self.ligands_file = None
        self.ligands_directory_pattern = None
        
        # Receptor
        self.receptor_file = None
        
        # READ
        # Properties
        self.absolute = False
        self.percentile = False
        self.ligands_efficiency_range = (None, None)
        self.energy_range = (None, None)
        self.ligands_efficiency_percentile = None
        self.energy_percentile = None
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(800, 601)
        MainWindow.setAutoFillBackground(True)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(-4, 50, 811, 401))
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setObjectName("tabWidget")
        self.writeTab = QtWidgets.QWidget()
        
        # WRITE TAB
        self.writeTab.setObjectName("writeTab")
        
        self.writeEngineGroupBox = QtWidgets.QGroupBox(self.writeTab)
        self.writeEngineGroupBox.setGeometry(QtCore.QRect(10, 0, 391, 131))
        self.writeEngineGroupBox.setObjectName("writeEngineGroupBox")
        self.autodockLabel = QtWidgets.QLabel(self.writeEngineGroupBox)
        self.autodockLabel.setGeometry(QtCore.QRect(10, 30, 171, 17))
        self.autodockLabel.setObjectName("autodockLabel")
        self.autodockComboBox = QtWidgets.QComboBox(self.writeEngineGroupBox)
        self.autodockComboBox.setGeometry(QtCore.QRect(190, 30, 161, 25))
        self.autodockComboBox.setObjectName("autodockComboBox")
        self.receptorLabel = QtWidgets.QLabel(self.writeEngineGroupBox)
        self.receptorLabel.setGeometry(QtCore.QRect(10, 90, 131, 17))
        self.receptorLabel.setObjectName("receptorLabel")
        self.receptorLineEdit = QtWidgets.QLineEdit(self.writeEngineGroupBox)
        self.receptorLineEdit.setGeometry(QtCore.QRect(140, 90, 161, 25))
        self.receptorLineEdit.setObjectName("receptorLineEdit")
        self.receptorLineEdit.setEnabled(False)
        self.browseReceptorButton = QtWidgets.QPushButton(self.writeEngineGroupBox)
        self.browseReceptorButton.setGeometry(QtCore.QRect(310, 90, 71, 25))
        self.browseReceptorButton.setObjectName("browseReceptorButton")
        
        self.writeLigandsGroupBox = QtWidgets.QGroupBox(self.writeTab)
        self.writeLigandsGroupBox.setGeometry(QtCore.QRect(10, 140, 391, 221))
        self.writeLigandsGroupBox.setObjectName("writeLigandsGroupBox")
        self.writeLigandsFromFileRadioButton = QtWidgets.QRadioButton(self.writeLigandsGroupBox)
        self.writeLigandsFromFileRadioButton.setGeometry(QtCore.QRect(20, 30, 191, 23))
        self.writeLigandsFromFileRadioButton.setObjectName("writeLigandsFromFileRadioButton")
        self.writeLigandsFromDirectoryRadioButton = QtWidgets.QRadioButton(self.writeLigandsGroupBox)
        self.writeLigandsFromDirectoryRadioButton.setGeometry(QtCore.QRect(220, 30, 131, 23))
        self.writeLigandsFromDirectoryRadioButton.setObjectName("writeLigandsFromDirectoryRadioButton")
        self.writeLigandsPatternLabel = QtWidgets.QLabel(self.writeLigandsGroupBox)
        self.writeLigandsPatternLabel.setGeometry(QtCore.QRect(20, 80, 67, 17))
        self.writeLigandsPatternLabel.setObjectName("writeLigandsPatternLabel")
        self.writeLigandsPatternLineEdit = QtWidgets.QLineEdit(self.writeLigandsGroupBox)
        self.writeLigandsPatternLineEdit.setGeometry(QtCore.QRect(90, 80, 181, 25))
        self.writeLigandsPatternLineEdit.setObjectName("writeLigandsPatternLineEdit")
        self.writeLigandsRecursiveCheckBox = QtWidgets.QCheckBox(self.writeLigandsGroupBox)
        self.writeLigandsRecursiveCheckBox.setGeometry(QtCore.QRect(20, 140, 92, 23))
        self.writeLigandsRecursiveCheckBox.setObjectName("writeLigandsRecursiveCheckBox")
        self.writeLigandsSelectLabel = QtWidgets.QLabel(self.writeLigandsGroupBox)
        self.writeLigandsSelectLabel.setGeometry(QtCore.QRect(20, 190, 161, 17))
        self.writeLigandsSelectLabel.setObjectName("writeLigandsSelectLabel")
        self.writeLigandsSelectLineEdit = QtWidgets.QLineEdit(self.writeLigandsGroupBox)
        self.writeLigandsSelectLineEdit.setGeometry(QtCore.QRect(180, 190, 113, 25))
        self.writeLigandsSelectLineEdit.setObjectName("writeLigandsSelectLineEdit")
        self.writeLigandsSelectLineEdit.setEnabled(False)
        self.writeLigandsSelectButton = QtWidgets.QPushButton(self.writeLigandsGroupBox)
        self.writeLigandsSelectButton.setGeometry(QtCore.QRect(300, 190, 89, 25))
        self.writeLigandsSelectButton.setObjectName("writeLigandsSelectButton")
        
        self.writeInteractionsGroupBox = QtWidgets.QGroupBox(self.writeTab)
        self.writeInteractionsGroupBox.setGeometry(QtCore.QRect(410, 0, 381, 251))
        self.writeInteractionsGroupBox.setObjectName("writeInteractionsGroupBox")
        
        self.maxPosesLabel = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.maxPosesLabel.setGeometry(QtCore.QRect(10, 30, 81, 17))
        self.maxPosesLabel.setObjectName("maxPosesLabel")
        self.maxPosesSpinBox = QtWidgets.QSpinBox(self.writeInteractionsGroupBox)
        self.maxPosesSpinBox.setGeometry(QtCore.QRect(90, 30, 61, 26))
        self.maxPosesSpinBox.setObjectName("maxPosesSpinBox")
        self.maxPosesSpinBox.setMaximum(1000000)
        self.maxPosesSpinBox.setMinimum(1)
        self.storeAllPosesCheckBox = QtWidgets.QCheckBox(self.writeInteractionsGroupBox)
        self.storeAllPosesCheckBox.setGeometry(QtCore.QRect(220, 30, 131, 23))
        self.storeAllPosesCheckBox.setObjectName("storeAllPosesCheckBox")
        self.addInteractionsCheckBox = QtWidgets.QCheckBox(self.writeInteractionsGroupBox)
        self.addInteractionsCheckBox.setGeometry(10, 90, 151, 23)
        self.addInteractionsCheckBox.setObjectName("addInteractionsCheckBox")
        self.distanceCutoffLabel = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.distanceCutoffLabel.setGeometry(QtCore.QRect(10, 130, 121, 17))
        self.distanceCutoffLabel.setObjectName("distanceCutoffLabel")
        self.hCutoffLabel = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.hCutoffLabel.setGeometry(QtCore.QRect(140, 130, 67, 17))
        self.hCutoffLabel.setObjectName("hCutoffLabel")
        self.vdwCutoffLabel = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.vdwCutoffLabel.setGeometry(QtCore.QRect(240, 130, 67, 17))
        self.vdwCutoffLabel.setObjectName("vdwCutoffLabel")
        self.hSpinBox = QtWidgets.QDoubleSpinBox(self.writeInteractionsGroupBox)
        self.hSpinBox.setGeometry(QtCore.QRect(140, 160, 65, 30))
        self.hSpinBox.setObjectName("hSpinBox")
        self.vdwSpinBox = QtWidgets.QDoubleSpinBox(self.writeInteractionsGroupBox)
        self.vdwSpinBox.setGeometry(QtCore.QRect(240, 160, 65, 30))
        self.vdwSpinBox.setObjectName("vdwSpinBox")
        self.toleranceLabelAD = QtWidgets.QLabel(self.writeInteractionsGroupBox)
        self.toleranceLabelAD.setGeometry(QtCore.QRect(10, 220, 81, 17))
        self.toleranceLabelAD.setObjectName("toleranceLabelAD")
        self.toleranceSpinBox = QtWidgets.QDoubleSpinBox(self.writeInteractionsGroupBox)
        self.toleranceSpinBox.setGeometry(QtCore.QRect(140, 220, 65, 26))
        self.toleranceSpinBox.setObjectName("toleranceSpinBox")
        
        self.proceedButton = QtWidgets.QPushButton(self.writeTab)
        self.proceedButton.setGeometry(QtCore.QRect(688, 304, 101, 61))
        self.proceedButton.setObjectName("proceedButton")
        self.tabWidget.addTab(self.writeTab, "")
        
        # READ TAB
        self.readTab = QtWidgets.QWidget()
        self.readTab.setObjectName("readTab")
        self.readPropertiesGroupBox = QtWidgets.QGroupBox(self.readTab)
        self.readPropertiesGroupBox.setGeometry(QtCore.QRect(10, 0, 381, 221))
        self.readPropertiesGroupBox.setObjectName("readPropertiesGroupBox")
        
        self.readLigandsGroupBox = QtWidgets.QGroupBox(self.readTab)
        self.readLigandsGroupBox.setGeometry(QtCore.QRect(10, 230, 381, 131))
        self.readLigandsGroupBox.setObjectName("readLigandsGroupBox")
        
        self.readInteractionsGroupBox = QtWidgets.QGroupBox(self.readTab)
        self.readInteractionsGroupBox.setGeometry(QtCore.QRect(400, 0, 401, 221))
        self.readInteractionsGroupBox.setObjectName("readInteractionsGroupBox")
        
        self.readProceedButton = QtWidgets.QPushButton(self.readTab)
        self.readProceedButton.setGeometry(QtCore.QRect(688, 304, 101, 61))
        self.readProceedButton.setObjectName("readProceedButton")
        
        # POPULATING PROPERTIES GROUP
        self.readAbsoluteRadioButton = QtWidgets.QRadioButton(self.readPropertiesGroupBox)
        self.readAbsoluteRadioButton.setObjectName("readAbsoluteRadioButton")
        
        self.readPercentileRadioButton = QtWidgets.QRadioButton(self.readPropertiesGroupBox)
        self.readPercentileRadioButton.setObjectName("readPercentileRadioButton")
        
        self.gridContainer = QtWidgets.QGridLayout()
        
        self.readEnergyLabel = QtWidgets.QLabel(self.readPropertiesGroupBox)
        self.readEnergyLabel.setObjectName("readEnergyLabel")
        
        self.readEnergySlider = RangeSlider(QtCore.Qt.Horizontal)
        self.readEnergySlider.setMinimumHeight(30)
        self.readEnergySlider.setObjectName("readAbsoluteEnergySlider")
        
        self.minEnergySpinBox = QtWidgets.QDoubleSpinBox(self.readPropertiesGroupBox)
        self.minEnergySpinBox.setFixedWidth(51)
        self.minEnergySpinBox.setFixedHeight(26)
        self.minEnergySpinBox.setValue(self.readEnergySlider.minimum())
        self.minEnergySpinBox.setObjectName("minEnergySpinBox")
        self.maxEnergySpinBox = QtWidgets.QDoubleSpinBox(self.readPropertiesGroupBox)
        self.maxEnergySpinBox.setFixedWidth(51)
        self.maxEnergySpinBox.setFixedHeight(26)
        self.maxEnergySpinBox.setValue(self.readEnergySlider.maximum())
        self.maxEnergySpinBox.setObjectName("maxEnergySpinBox")        
        
        self.readLigandsEfficiencyLabel = QtWidgets.QLabel(self.readPropertiesGroupBox)
        self.readLigandsEfficiencyLabel.setObjectName("readLigandsEfficiencyLabel")
        
        self.readLigandsEfficiencySlider = RangeSlider(QtCore.Qt.Horizontal)
        self.readLigandsEfficiencySlider.setMinimumHeight(30)
        self.readLigandsEfficiencySlider.setObjectName("readAbsoluteLigandsEfficiencySlider")
        
        self.minLigandsEfficiencySpinBox = QtWidgets.QDoubleSpinBox(self.readPropertiesGroupBox)
        self.minLigandsEfficiencySpinBox.setFixedWidth(51)
        self.minLigandsEfficiencySpinBox.setFixedHeight(26)
        self.minLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.minimum()/100)
        self.minLigandsEfficiencySpinBox.setObjectName("minLigandsEfficiencySpinBox")
        self.maxLigandsEfficiencySpinBox = QtWidgets.QDoubleSpinBox(self.readPropertiesGroupBox)
        self.maxLigandsEfficiencySpinBox.setFixedWidth(51)
        self.maxLigandsEfficiencySpinBox.setFixedHeight(26)
        self.maxLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.maximum()/100)
        self.maxLigandsEfficiencySpinBox.setObjectName("maxLigandsEfficiencySpinBox")
        
        self.gridContainer.setSpacing(2)
        self.gridContainer.addWidget(self.readAbsoluteRadioButton, 0, 0)
        self.gridContainer.addWidget(self.readPercentileRadioButton, 0, 1)
        self.gridContainer.addWidget(self.readEnergyLabel, 1, 0)
        self.gridContainer.addWidget(self.readEnergySlider, 2, 0, 1, 1)
        self.gridContainer.addWidget(self.minEnergySpinBox, 3, 0)
        self.gridContainer.addWidget(self.maxEnergySpinBox, 3, 1)
        self.gridContainer.addWidget(self.readLigandsEfficiencyLabel, 4, 0)
        self.gridContainer.addWidget(self.readLigandsEfficiencySlider, 5, 0, 1, 1)
        self.gridContainer.addWidget(self.minLigandsEfficiencySpinBox, 6, 0)
        self.gridContainer.addWidget(self.maxLigandsEfficiencySpinBox, 6, 1)
        self.gridContainer.setObjectName("gridContainer")
        self.readPropertiesGroupBox.setLayout(self.gridContainer)
        
        # POPULATING LIGAND FILTER GROUP
        
        # POPULATING INTERACTIONS FILTER GROUP
        
        self.tabWidget.addTab(self.readTab, "")
        self.dbLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.dbLineEdit.setGeometry(QtCore.QRect(160, 10, 231, 25))
        self.dbLineEdit.setObjectName("dbLineEdit")
        self.dbLabel = QtWidgets.QLabel(self.centralwidget)
        self.dbLabel.setGeometry(QtCore.QRect(0, 10, 141, 17))
        self.dbLabel.setObjectName("dbLabel")
        self.loadDbButton = QtWidgets.QPushButton(self.centralwidget)
        self.loadDbButton.setGeometry(QtCore.QRect(420, 10, 89, 25))
        self.loadDbButton.setObjectName("loadDbButton")
        self.createDbButton = QtWidgets.QPushButton(self.centralwidget)
        self.createDbButton.setGeometry(QtCore.QRect(520, 10, 89, 25))
        self.createDbButton.setObjectName("createDbButton")
        self.generalPropertiesBox = QtWidgets.QGroupBox(self.centralwidget)
        self.generalPropertiesBox.setGeometry(QtCore.QRect(10, 470, 781, 101))
        self.generalPropertiesBox.setObjectName("generalPropertiesBox")
        self.numberOfProcessorsLabel = QtWidgets.QLabel(self.generalPropertiesBox)
        self.numberOfProcessorsLabel.setGeometry(QtCore.QRect(10, 30, 101, 17))
        self.numberOfProcessorsLabel.setObjectName("numberOfProcessorsLabel")
        self.numberOfProcessorsBox = QtWidgets.QSpinBox(self.generalPropertiesBox)
        self.numberOfProcessorsBox.setGeometry(QtCore.QRect(120, 30, 44, 26))
        self.numberOfProcessorsBox.setObjectName("numberOfProcessorsBox")
        self.numberOfProcessorsBox.setMaximum(multiprocessing.cpu_count())
        self.numberOfProcessorsBox.setMinimum(1)
        self.verboseCheckBox = QtWidgets.QCheckBox(self.generalPropertiesBox)
        self.verboseCheckBox.setGeometry(QtCore.QRect(200, 30, 112, 23))
        self.verboseCheckBox.setObjectName("verboseCheckBox")
        self.debugCheckBox = QtWidgets.QCheckBox(self.generalPropertiesBox)
        self.debugCheckBox.setGeometry(QtCore.QRect(310, 30, 112, 23))
        self.debugCheckBox.setObjectName("debugCheckBox")
        
        # Logo
        self.logo_label = QtWidgets.QLabel(self.centralwidget)
        self.ringtailLogo = QtGui.QPixmap(os.path.join(ringtail_gui_path, 'img/ringtail_logo.png'))
        self.ringtail_logo_scaled = self.ringtailLogo.scaled(171, 60, QtCore.Qt.KeepAspectRatio)
        self.logo_label.setPixmap(self.ringtail_logo_scaled)
        self.logo_label.resize(self.ringtail_logo_scaled.width(), self.ringtail_logo_scaled.height())
        self.logo_label.setGeometry(QtCore.QRect(640, 10, 171, 60))
        
        MainWindow.setCentralWidget(self.centralwidget)
        # self.setFixedSize(800, 601)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # CUSTOM VARIABLES
        #-----------------------------------------------------------------#
        # self.db = None
        # self.engine_types = ["AutoDock", "Vina"]
        # self.selected_engine = None
        # self.processors_number = None
        # self.h_cutoff_distance = None
        # self.vdw_cutoff_distance = None
        # self.receptorForm = None
        # self.tolerance = None
        # self.max_poses = self.maxPosesSpinBox.value()
        # self.store_all_poses = False
        # self.verbose = False
        # self.debug = False
        #-----------------------------------------------------------------#
        
        # EVENTS HANDLING
        #-----------------------------------------------------------------#
        # WRITE
        self.autodockComboBox.currentIndexChanged.connect(self.set_engine)
        self.numberOfProcessorsBox.valueChanged.connect(self.set_number_of_processors)
        self.hSpinBox.valueChanged.connect(self.set_h_cutoff_distance)
        self.vdwSpinBox.valueChanged.connect(self.set_vdw_cutoff_distance)
        self.toleranceSpinBox.valueChanged.connect(self.set_tolerance)
        self.dbLineEdit.textChanged.connect(self.enable_process)
        self.writeLigandsPatternLineEdit.textChanged.connect(self.set_ligands_pattern)
        self.writeLigandsSelectLineEdit.textChanged.connect(self.set_ligands_selection)
        self.receptorLineEdit.textChanged.connect(self.set_receptor_filename)
        
        self.loadDbButton.clicked.connect(self.select_db)
        self.browseReceptorButton.clicked.connect(self.select_receptor)
        self.proceedButton.clicked.connect(self.proceed_write_analysis)
        self.createDbButton.clicked.connect(self.create_db)
        self.storeAllPosesCheckBox.clicked.connect(self.set_store_all_poses)
        self.verboseCheckBox.clicked.connect(self.set_verbose)
        self.debugCheckBox.clicked.connect(self.set_debug)
        self.writeLigandsFromDirectoryRadioButton.clicked.connect(self.enable_ligands_from_directory)
        self.writeLigandsFromFileRadioButton.clicked.connect(self.enable_ligands_from_file)
        self.writeLigandsRecursiveCheckBox.clicked.connect(self.set_ligands_recursive_search)
        self.writeLigandsSelectButton.clicked.connect(self.select_ligands_sources)
        self.addInteractionsCheckBox.clicked.connect(self.set_add_interactions)
        
        # READ
        self.readAbsoluteRadioButton.clicked.connect(self.set_absolute_or_percentile)
        self.readPercentileRadioButton.clicked.connect(self.set_absolute_or_percentile)
        self.readEnergySlider.sliderMoved.connect(self.update_energy_spinboxes)
        self.maxEnergySpinBox.valueChanged.connect(self.update_energy_slider_max)
        self.minEnergySpinBox.valueChanged.connect(self.update_energy_slider_min)
        self.readLigandsEfficiencySlider.sliderMoved.connect(self.update_ligands_spinboxes)
        self.maxLigandsEfficiencySpinBox.valueChanged.connect(self.update_ligand_slider_max)
        self.minLigandsEfficiencySpinBox.valueChanged.connect(self.update_ligand_slider_min)
        #-----------------------------------------------------------------#
        
                # INITIALIZATION
        #-----------------------------------------------------------------#
        self.populate_engine_combo()
        self.set_default_number_of_processors()
        self.set_default_cutoffs()
        self.disable_everything()
        if self.db is None:
            self.proceedButton.setEnabled(False)
            
        # READ
        self.readAbsoluteRadioButton.click()
        #-----------------------------------------------------------------#
        
    # CLASS METHODS
    #-----------------------------------------------------------------#
    def disable_everything(self):
        self.writeEngineGroupBox.setEnabled(False)
        self.writeLigandsGroupBox.setEnabled(False)
        self.writeInteractionsGroupBox.setEnabled(False)
        self.proceedButton.setEnabled(False)
        
    def enable_receptor_groupBox(self):
        self.writeEngineGroupBox.setEnabled(True)
        
    def enable_ligands_groupBox(self):
        self.writeLigandsGroupBox.setEnabled(True)
        self.writeLigandsFromFileRadioButton.click()

    def enable_interactions_groupBox(self):
        self.writeInteractionsGroupBox.setEnabled(True)
    
    # GENERAL
    def create_db(self):
        self.db = save_file()[0]
        self.dbLineEdit.setText(self.db)
        if self.db is not None:
            self.enable_receptor_groupBox()
        
    def select_db(self):
        self.db = browse_file("All Files (*);;Db Files (*.db)")[0]
        if self.db != "":
            self.dbLineEdit.setText(self.db)
            if self.db is not None:
                self.enable_receptor_groupBox()
        
    def set_debug(self):
        if self.debugCheckBox.isChecked():
            self.debug = True
        else:
            self.debug = False
            
    def set_verbose(self):
        if self.verboseCheckBox.isChecked():
            self.verbose = True
        else:
            self.verbose = False
    
    def set_default_number_of_processors(self):
        self.numberOfProcessorsBox.setValue(self.numberOfProcessorsBox
                                            .maximum())
        self.processors_number = int(self.numberOfProcessorsBox.value())
    
    def set_number_of_processors(self):
        self.processors_number = self.numberOfProcessorsBox.value()
    #-----------------------------------------------------------------#

    
    # WRITE
    def proceed_write_analysis(self):
        show_message("Starts the analysis!", 0)
        
    def enable_process(self):
        print(self.dbLineEdit.text())
        if self.dbLineEdit.text() == "":
            self.db = None
        if self.db is not None and self.receptor_file is not None:
            self.proceedButton.setEnabled(True)
        else:
            self.proceedButton.setEnabled(False)
    #-----------------------------------------------------------------#
        
    def set_add_interactions(self):
        if self.addInteractionsCheckBox.isChecked():
            self.hSpinBox.setEnabled(True)
            self.vdwSpinBox.setEnabled(True)
        else:
            self.hSpinBox.setEnabled(False)
            self.vdwSpinBox.setEnabled(False)
            self.h_cutoff_distance = None
            self.vdw_cutoff_distance = None
    
    # WRITE -> RECEPTOR
    def select_receptor(self):
        self.receptorLineEdit.setText(browse_file("All Files (*)")[0])
        
    def set_receptor_filename(self):
        self.receptor_file = self.receptorLineEdit.text()
        if self.receptor_file == "":
            self.receptor_file = None
        if self.receptor_file is not None:
            self.enable_process()
            self.enable_ligands_groupBox()
            self.enable_interactions_groupBox()
    
    def set_engine(self):
        self.selected_engine = self.autodockComboBox.currentText()
        if self.selected_engine == 'AutoDock':
            self.toleranceLabelAD.setVisible(True)
            self.toleranceSpinBox.setVisible(True)
            self.toleranceSpinBox.setEnabled(True)
            self.addInteractionsCheckBox.setChecked(False)
            self.hSpinBox.setEnabled(False)
            self.vdwSpinBox.setEnabled(False)
        else:
            self.addInteractionsCheckBox.setChecked(True)
            self.hSpinBox.setEnabled(True)
            self.vdwSpinBox.setEnabled(True)
            self.toleranceLabelAD.setVisible(False)
            self.toleranceSpinBox.setVisible(False)
            self.toleranceSpinBox.setEnabled(False)    
    
    def populate_engine_combo(self):
        for engine in self.engine_types:
            self.autodockComboBox.addItem(engine)
            self.autodockComboBox.itemData
        self.autodockComboBox.currentIndex = 0
    #-----------------------------------------------------------------#
    
    # WRITE -> LIGANDS
    def enable_ligands_from_file(self):
        if self.writeLigandsFromFileRadioButton.isChecked():
            self.writeLigandsRecursiveCheckBox.setEnabled(False)
            self.writeLigandsRecursiveCheckBox.setVisible(False)
            self.recursive = False
            self.writeLigandsPatternLabel.setVisible(False)
            self.writeLigandsPatternLineEdit.setEnabled(False)
            self.writeLigandsPatternLineEdit.setVisible(False)
            self.ligands_directory_pattern = None
            self.ligands_directory = None
            self.writeLigandsSelectLineEdit.setText("")
    
    def enable_ligands_from_directory(self):
        if self.writeLigandsFromDirectoryRadioButton.isChecked():
            self.writeLigandsRecursiveCheckBox.setEnabled(True)
            self.writeLigandsRecursiveCheckBox.setVisible(True)
            self.recursive = False
            self.writeLigandsPatternLabel.setVisible(True)
            self.writeLigandsPatternLineEdit.setEnabled(True)
            self.writeLigandsPatternLineEdit.setVisible(True)
            self.ligands_directory_pattern = None
            self.ligands_directory = None
            self.writeLigandsSelectLineEdit.setText("")
    
    def set_ligands_pattern(self):
        if self.writeLigandsPatternLineEdit.text() != "":
            self.ligands_directory_pattern = self.writeLigandsPatternLineEdit.text()
        else:
            self.ligands_directory_pattern = None
    
    def set_ligands_recursive_search(self):
        if self.writeLigandsRecursiveCheckBox.isChecked():
            self.recursive = True
        else:
            self.recursive = False
            
    def select_ligands_sources(self):
        if self.writeLigandsFromDirectoryRadioButton.isChecked():
            self.ligands_directory = browse_directory()
            self.ligands_file = None
            self.writeLigandsSelectLineEdit.setText(self.ligands_directory)
        elif self.writeLigandsFromFileRadioButton.isChecked():
            self.ligands_file = browse_file()[0]
            self.ligands_directory = None
            self.writeLigandsSelectLineEdit.setText(self.ligands_file)
        
    def set_ligands_selection(self):
        if self.writeLigandsSelectLineEdit.text() == "":
            self.ligands_directory = None
            self.ligands_file = None
    #-----------------------------------------------------------------#

    # WRITE -> PROPERTIES
    def set_default_cutoffs(self):
        self.hSpinBox.setValue(3.7)
        self.vdwSpinBox.setValue(4.0)
    
    def set_h_cutoff_distance(self):
        self.h_cutoff_distance = float(self.hSpinBox.value())
        
    def set_vdw_cutoff_distance(self):
        self.vdw_cutoff_distance = float(self.vdwSpinBox.value())
    
    def set_store_all_poses(self):
        if self.storeAllPosesCheckBox.isChecked():
            self.maxPosesSpinBox.setValue(500)
            self.maxPosesSpinBox.setEnabled(False)
            self.store_all_poses = True
        else:
            self.maxPosesSpinBox.setValue(0)
            self.maxPosesSpinBox.setEnabled(True)
            self.store_all_poses = False
        self.max_poses = int(self.maxPosesSpinBox.value())
            
    def set_tolerance(self):
        if self.selected_engine == 'AutoDock':
            self.tolerance = float(self.toleranceSpinBox.value())
        else:
            self.tolerance = None
    #-----------------------------------------------------------------#

    # READ -> PROPERTIES
    def set_absolute_or_percentile(self):
        if self.readAbsoluteRadioButton.isChecked():
            self.absolute = True
            self.percentile = False
            self.hide_sliders(False)
            energy_max, energy_min = get_energy_max_min()
            lig_eff_max, lig_eff_min = get_ligands_efficiency_max_min()
            self.readEnergySlider.setMaximum(energy_max)
            self.readEnergySlider.setMinimum(energy_min)
            self.readEnergySlider.setHigh(self.readEnergySlider.maximum())
            self.readEnergySlider.setLow(self.readEnergySlider.minimum())
            self.readLigandsEfficiencySlider.setMaximum(lig_eff_max)
            self.readLigandsEfficiencySlider.setMinimum(lig_eff_min)
            self.readLigandsEfficiencySlider.setHigh(self.readLigandsEfficiencySlider.maximum())
            self.readLigandsEfficiencySlider.setLow(self.readLigandsEfficiencySlider.minimum())
        elif self.readPercentileRadioButton.isChecked():
            self.percentile = True
            self.absolute = False
            self.hide_sliders(True)
        self.setup_spinboxes()
            
    
    def hide_sliders(self, hide):
        if hide:
            self.readEnergySlider.setVisible(False)
            self.readEnergySlider.setEnabled(False)
            self.readLigandsEfficiencySlider.setVisible(False)
            self.readLigandsEfficiencySlider.setEnabled(False)
            self.maxLigandsEfficiencySpinBox.setVisible(False)
            self.maxLigandsEfficiencySpinBox.setEnabled(False)
            self.maxEnergySpinBox.setVisible(False)
            self.maxEnergySpinBox.setEnabled(False)
        else:
            self.readEnergySlider.setVisible(True)
            self.readEnergySlider.setEnabled(True)
            self.readLigandsEfficiencySlider.setVisible(True)
            self.readLigandsEfficiencySlider.setEnabled(True)
            self.maxLigandsEfficiencySpinBox.setVisible(True)
            self.maxLigandsEfficiencySpinBox.setEnabled(True)
            self.maxEnergySpinBox.setVisible(True)
            self.maxEnergySpinBox.setEnabled(True)
            
    def setup_spinboxes(self):
        if self.readAbsoluteRadioButton.isChecked():
            self.maxEnergySpinBox.setMaximum(self.readEnergySlider.maximum())
            self.maxEnergySpinBox.setMinimum(self.readEnergySlider.minimum())
            self.minEnergySpinBox.setMaximum(self.readEnergySlider.maximum())
            self.minEnergySpinBox.setMinimum(self.readEnergySlider.minimum())
            self.maxLigandsEfficiencySpinBox.setMaximum(self.readLigandsEfficiencySlider.maximum()/1000)
            self.maxLigandsEfficiencySpinBox.setMinimum(self.readLigandsEfficiencySlider.minimum()/1000)
            self.minLigandsEfficiencySpinBox.setMaximum(self.readLigandsEfficiencySlider.maximum()/1000)
            self.minLigandsEfficiencySpinBox.setMinimum(self.readLigandsEfficiencySlider.minimum()/1000)
        else:
            self.minEnergySpinBox.setMaximum(100)
            self.minEnergySpinBox.setMinimum(0)
            self.minLigandsEfficiencySpinBox.setMaximum(100)
            self.minLigandsEfficiencySpinBox.setMinimum(0)
    
    def update_energy_spinboxes(self):
        self.maxEnergySpinBox.setValue(self.readEnergySlider.high())
        self.minEnergySpinBox.setValue(self.readEnergySlider.low())
    
    def update_energy_slider_max(self):
        self.readEnergySlider.setHigh(int(self.maxEnergySpinBox.value()))
    
    def update_energy_slider_min(self):
        self.readEnergySlider.setLow(int(self.minEnergySpinBox.value()))
        
    def update_ligands_spinboxes(self):
        self.maxLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.high() / 1000)
        self.minLigandsEfficiencySpinBox.setValue(self.readLigandsEfficiencySlider.low() / 1000)
        
    def update_ligand_slider_max(self):
        self.readLigandsEfficiencySlider.setHigh(int(self.maxLigandsEfficiencySpinBox.value() * 1000))
    
    def update_ligand_slider_min(self):
        self.readLigandsEfficiencySlider.setLow(int(self.minLigandsEfficiencySpinBox.value() * 1000))
    #-----------------------------------------------------------------#
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Mock RingTail"))
        
        self.writeEngineGroupBox.setTitle(_translate("MainWindow", "Receptor:"))
        self.autodockLabel.setText(_translate("MainWindow", "Select docking engine:"))
        self.receptorLabel.setText(_translate("MainWindow", "Select receptor:"))
        self.browseReceptorButton.setText(_translate("MainWindow", "Browse"))
        self.writeInteractionsGroupBox.setTitle(_translate("MainWindow", "Properties:"))
        self.distanceCutoffLabel.setText(_translate("MainWindow", "Distance cutoff:"))
        self.toleranceLabelAD.setText(_translate("MainWindow", "Tolerance:"))
        self.maxPosesLabel.setText(_translate("MainWindow", "Max poses:"))
        self.storeAllPosesCheckBox.setText(_translate("MainWindow", "Store all poses"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.writeTab), _translate("MainWindow", "Write"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.readTab), _translate("MainWindow", "Read"))
        self.dbLabel.setText(_translate("MainWindow", "Select database file:"))
        self.loadDbButton.setText(_translate("MainWindow", "Load"))
        self.generalPropertiesBox.setTitle(_translate("MainWindow", "Advanced options:"))
        self.numberOfProcessorsLabel.setText(_translate("MainWindow", "Processors #:"))
        self.verboseCheckBox.setText(_translate("MainWindow", "Verbose"))
        self.debugCheckBox.setText(_translate("MainWindow", "Debug"))
        self.createDbButton.setText(_translate("MainWindow", "Create"))
        self.proceedButton.setText(_translate("MainWindow", "Process"))
        self.hCutoffLabel.setText(_translate("MainWindow", "H"))
        self.vdwCutoffLabel.setText(_translate("MainWindow", "VDW"))
        self.writeLigandsGroupBox.setTitle(_translate("MainWindow", "Ligands:"))
        self.writeLigandsFromFileRadioButton.setText(_translate("MainWindow", "From file"))
        self.writeLigandsFromDirectoryRadioButton.setText(_translate("MainWindow", "From directory"))
        self.writeLigandsPatternLabel.setText(_translate("MainWindow", "Pattern:"))
        self.writeLigandsRecursiveCheckBox.setText(_translate("MainWindow", "Recursive"))
        self.writeLigandsSelectLabel.setText(_translate("MainWindow", "Select ligands source:"))
        self.writeLigandsSelectButton.setText(_translate("MainWindow", "Add ..."))
        self.addInteractionsCheckBox.setText(_translate("MainWindow", "Add interactions"))
        
        self.readPropertiesGroupBox.setTitle(_translate("MainWindow", "Properties:"))
        self.readAbsoluteRadioButton.setText(_translate("MainWindow", "Absolute"))
        self.readPercentileRadioButton.setText(_translate("MainWindow", "Percentile"))
        self.readEnergyLabel.setText(_translate("MainWindow", "Energy:"))
        self.readLigandsEfficiencyLabel.setText(_translate("MainWindow", "Ligands Efficiency:"))
        
        self.readInteractionsGroupBox.setTitle(_translate("MainWindow", "Interactions:"))
        self.readLigandsGroupBox.setTitle(_translate("MainWindow", "Ligands:"))
        self.readProceedButton.setText(_translate("MainWindow", "Process"))
        
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
